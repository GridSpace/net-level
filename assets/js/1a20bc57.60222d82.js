"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[372],{8996:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=t(2488),a=t(7052);const r={title:"Command Line Client",slug:"/cli"},l=void 0,i={id:"cli",title:"Command Line Client",description:"Start a client",source:"@site/docs/cli.md",sourceDirName:".",slug:"/cli",permalink:"/net-level/docs/cli",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Command Line Client",slug:"/cli"},sidebar:"docs",previous:{title:"Net-Level Server Setup",permalink:"/net-level/docs/setup"},next:{title:"Application Server",permalink:"/net-level/docs/express"}},o={},c=[{value:"Start a client",id:"start-a-client",level:2},{value:"CLI Uses",id:"cli-uses",level:2},{value:"Check Help",id:"check-help",level:2},{value:"Create a Data Store",id:"create-a-data-store",level:2},{value:"Add a key pairs",id:"add-a-key-pairs",level:2},{value:"Range Queries",id:"range-queries",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"start-a-client",children:"Start a client"}),"\n",(0,s.jsx)(n.p,{children:"The default port for net-level is 3000. If you have started your server on another port, be sure to tell the client!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"node lib/cli --user=admin --pass=adminpass --port 3333\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cli-uses",children:"CLI Uses"}),"\n",(0,s.jsx)(n.p,{children:"The net-level client provides an interface for simple admin tasks."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The term ",(0,s.jsx)(n.code,{children:"base"})," is used to refer to a data store"]})}),"\n",(0,s.jsx)(n.h2,{id:"check-help",children:"Check Help"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"help"})," will list available commands regardless of current connection and auth status, but command availability is limited by auth level with the connected server."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"[ grid.space net level client 1.0 ]\n:: help\nauth  [user] [pass]    - authenticate connection with server\ndrop  [base]           - drop a database (cannot be in use)\ndebug [base] [0|1]     - disable or enable debugging for a data store\nclose                  - disconnect client from server\nopen  [host] <port>    - connect client to a server\nstat  [cmd]  <opts>    - get server or data store stats (with auth)\nuser  [cmd]  <opts>    - get or set user info (with auth)\nuse   [base] <opts>    - make data store active (create with auth)\nget   [key]            - fetch key's value from active data store\nput   [key]  [value]   - put key/value pair into active data store\ndel   [key]            - delete key's value from active data store\nlist  [from] <to>      - list entries in range provided\ncull  [from] <to>      - delete entries in range provided\nkeys  [from] <to>      - list only keys in range provided\ncount [from] <to>      - count entries in range provided\nlimit [count]          - limit range queries to [count] max entries\nhelp  [command]        - command help\n"})}),"\n",(0,s.jsx)(n.h2,{id:"create-a-data-store",children:"Create a Data Store"}),"\n",(0,s.jsx)(n.p,{children:"A store will be created if it does not already exist."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"use sandbox\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"add-a-key-pairs",children:["Add a key",":value"," pairs"]}),"\n",(0,s.jsx)(n.p,{children:"The CLI only supports values with no spaces. More complex values must be added programmatically via the client library."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:':sandbox: put x {key:"value"}\n:sandbox: put y {foo:"bar"}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"range-queries",children:"Range Queries"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"keys"}),", ",(0,s.jsx)(n.code,{children:"list"}),", ",(0,s.jsx)(n.code,{children:"count"}),", and ",(0,s.jsx)(n.code,{children:"cull"})," commands operate on Lexicographic order and return everthing greater than or equal to ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"from"})})," and less than ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"to"})}),", unless a ",(0,s.jsx)(n.code,{children:"limit"})," has been specified."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// keys [from] <to>\n:sandbox: keys x y\nx\n{ count: 1 }\n:sandbox: keys x z\nx\ny\n{ count: 2 }\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:":sandbox: list x z\n{ key: 'x', value: { key: 'value' } }\n{ key: 'y', value: { foo: 'bar' } }\n{ count: 2 }\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},7052:(e,n,t)=>{t.d(n,{I:()=>i,M:()=>l});var s=t(6651);const a={},r=s.createContext(a);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);