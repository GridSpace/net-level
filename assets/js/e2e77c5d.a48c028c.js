(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{81:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(7),l=(t(0),t(90)),s={title:"Application Server",slug:"/express"},o={unversionedId:"express",id:"express",isDocsHomePage:!1,title:"Application Server",description:"The application in the _/example_ folder demonstrates calling a net-level database server from an Express application server.",source:"@site/docs/express.md",sourceDirName:".",slug:"/express",permalink:"/net-level/docs/express",version:"current",frontMatter:{title:"Application Server",slug:"/express"},sidebar:"docs",previous:{title:"Command Line Client",permalink:"/net-level/docs/cli"},next:{title:"Net Level Client",permalink:"/net-level/docs/net-level-client"}},i=[{value:"Install",id:"install",children:[]},{value:"Connection Parameters",id:"connection-parameters",children:[]},{value:"Start application server",id:"start-application-server",children:[]},{value:"Run client",id:"run-client",children:[]}],c={toc:i};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The application in the ",Object(l.b)("strong",{parentName:"p"},Object(l.b)("em",{parentName:"strong"},"/example"))," folder demonstrates calling a net-level database server from an ",Object(l.b)("a",{parentName:"p",href:"https://expressjs.com/"},"Express")," application server."),Object(l.b)("p",null,"It demonstrates a ",Object(l.b)("inlineCode",{parentName:"p"},"netLevelRouter")," wrapping a module which provides connection management. While this is not necessarily how you would build an application, it does offer an quick way to begin interacting with ",Object(l.b)("strong",{parentName:"p"},Object(l.b)("em",{parentName:"strong"},"LevelDB!"))),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},'import netLevel from "./index";\nimport express from "express";\n\nexport const netLevelRouter = express.Router();\n\nnetLevelRouter.route("/get").get((req, res) => {\n  netLevel.get(req.query.base, req.query).then(\n    (value) => res.send(value),\n    (err) => res.send({ err })\n  );\n});\n\n...\n')),Object(l.b)("h2",{id:"install"},"Install"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-shell"},"cd example\nyarn install\n// or\nnpm install\n")),Object(l.b)("h2",{id:"connection-parameters"},"Connection Parameters"),Object(l.b)("p",null,"A ",Object(l.b)("inlineCode",{parentName:"p"},".env")," file is used to define connection parameterd. Set these values to point to a running net-level server, e.g.:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-shell"},"DB_HOST=localhost\nDB_PORT=3333\nDB_USER=admin\nDB_PASS=adminpass\n")),Object(l.b)("h2",{id:"start-application-server"},"Start application server"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-shell"},"node -r esm index.js -p 8880\n")),Object(l.b)("h2",{id:"run-client"},"Run client"),Object(l.b)("p",null,"In a new terminal window...\n...or open the URLs in a browser tab."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-shell"},'curl -X GET --url "http://localhost:8880/db/set?base=sandbox&key=hello&value=universe"\n\ncurl -X GET --url "http://localhost:8880/db/get?base=sandbox&key=hello"\n\ncurl -X GET --url "http://localhost:8880/db/set?base=sandbox&key=hello&value=world"\n\ncurl -X GET --url "http://localhost:8880/db/get?base=sandbox&key=hello"\n')))}p.isMDXComponent=!0}}]);